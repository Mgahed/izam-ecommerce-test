openapi: 3.0.3
info:
  title: IZAM E-Commerce API
  description: API documentation for the IZAM e-commerce platform
  version: 1.0.0
  contact:
    email: abdelrhmanmgahed131@gmail.com
servers:
  - url: https://izamtest.mgahed.com/api
    description: live server
tags:
  - name: Authentication
    description: User authentication and registration
  - name: Shop
    description: Shop settings and configuration
  - name: Products
    description: Product management endpoints
  - name: Categories
    description: Category management endpoints
  - name: Orders
    description: Order management endpoints
  - name: Admin
    description: Admin-specific endpoints

paths:
  /settings:
    get:
      tags:
        - Shop
      summary: Get shop settings
      description: Retrieve tax and shipping configuration for the shop
      responses:
        '200':
          description: Shop settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSettings'

  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
                password_confirmation:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /login:
    post:
      tags:
        - Authentication
      summary: Login to an existing account
      description: Authenticate and receive access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout from current session
      description: Revoke the user's access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      tags:
        - Authentication
      summary: Get authenticated user's profile
      description: Retrieve the current authenticated user's data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /products:
    get:
      tags:
        - Products
      summary: Get product list
      description: Retrieve paginated list of products with optional filters
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Filter products by name (partial match)
        - name: min_price
          in: query
          schema:
            type: number
            format: float
          description: Filter products by minimum price
        - name: max_price
          in: query
          schema:
            type: number
            format: float
          description: Filter products by maximum price
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter products by category ID
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProducts'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a single product
      description: Retrieve detailed information about a specific product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve list of all product categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /orders:
    get:
      tags:
        - Orders
      summary: Get user's orders
      description: Retrieve paginated list of orders for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrders'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Orders
      summary: Create a new order
      description: Place a new order with products from the cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
              properties:
                products:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - quantity
                    properties:
                      id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order placed successfully
                  order:
                    $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get a specific order
      description: Retrieve detailed information about a specific order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Orders
      summary: Cancel an order
      description: Cancel a pending order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order cancelled successfully
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cannot cancel an order that is not pending
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/products:
    get:
      tags:
        - Admin
      summary: Get all products (admin)
      description: Admin endpoint to retrieve all products with additional filters
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Filter products by name
        - name: category_id
          in: query
          schema:
            type: integer
          description: Filter products by category ID
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProducts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Admin
      summary: Create a new product
      description: Admin endpoint to create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /admin/products/{id}:
    get:
      tags:
        - Admin
      summary: Get a product (admin)
      description: Admin endpoint to retrieve a specific product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Admin
      summary: Update a product
      description: Admin endpoint to update a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Admin
      summary: Delete a product
      description: Admin endpoint to delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Cannot delete product with orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cannot delete product. It is associated with one or more orders.

  /admin/categories:
    get:
      tags:
        - Admin
      summary: Get all categories (admin)
      description: Admin endpoint to retrieve all categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Admin
      summary: Create a new category
      description: Admin endpoint to create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Electronics
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /admin/categories/{id}:
    get:
      tags:
        - Admin
      summary: Get a category (admin)
      description: Admin endpoint to retrieve a specific category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Admin
      summary: Update a category
      description: Admin endpoint to update a category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Updated Electronics
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Admin
      summary: Delete a category
      description: Admin endpoint to delete a category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Category ID
      responses:
        '204':
          description: Category deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/orders:
    get:
      tags:
        - Admin
      summary: Get all orders (admin)
      description: Admin endpoint to retrieve all orders with filtering options
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, completed, cancelled]
          description: Filter orders by status
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter orders by user ID
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrders'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/orders/{id}:
    get:
      tags:
        - Admin
      summary: Get a specific order (admin)
      description: Admin endpoint to retrieve detailed information about an order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/orders/{order}/status:
    patch:
      tags:
        - Admin
      summary: Update order status
      description: Admin endpoint to update the status of an order
      security:
        - bearerAuth: []
      parameters:
        - name: order
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, processing, completed, cancelled]
                  example: processing
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthenticated

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Resource not found

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The given data was invalid.
              errors:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                example:
                  email:
                    - The email field is required.
                    - The email must be a valid email address.

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: 1|abcdefghijklmnopqrstuvwxyz1234567890

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Classic Blue T-shirt
        description:
          type: string
          example: High-quality cotton t-shirt with modern design.
        price:
          type: number
          format: float
          example: 29.99
        stock_quantity:
          type: integer
          example: 100
        image_path:
          type: string
          nullable: true
          example: /images/products/1.png
        category_id:
          type: integer
          nullable: true
          example: 1
        category:
          $ref: '#/components/schemas/Category'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductInput:
      type: object
      required:
        - name
        - price
        - stock_quantity
      properties:
        name:
          type: string
          example: Classic Blue T-shirt
        description:
          type: string
          example: High-quality cotton t-shirt with modern design.
        price:
          type: number
          format: float
          example: 29.99
        stock_quantity:
          type: integer
          example: 100
        category_id:
          type: integer
          nullable: true
          example: 1

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Clothing
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        subtotal:
          type: number
          format: float
          example: 49.98
        tax:
          type: number
          format: float
          example: 5.00
        shipping:
          type: number
          format: float
          example: 5.00
        total:
          type: number
          format: float
          example: 59.98
        status:
          type: string
          enum: [pending, processing, completed, cancelled]
          example: pending
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Classic Blue T-shirt
              price:
                type: number
                format: float
                example: 29.99
              pivot:
                type: object
                properties:
                  quantity:
                    type: integer
                    example: 2
                  price:
                    type: number
                    format: float
                    example: 29.99
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ShopSettings:
      type: object
      properties:
        shipping:
          type: object
          properties:
            flat_rate:
              type: number
              format: float
              example: 5.00
        tax:
          type: object
          properties:
            rate:
              type: number
              format: float
              example: 0.10
              description: Tax rate as a decimal (e.g., 0.10 for 10%)

    PaginatedProducts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        links:
          type: object
          properties:
            first:
              type: string
              example: https://izamtest.mgahed.com/api/products?page=1
            last:
              type: string
              example: https://izamtest.mgahed.com/api/products?page=10
            prev:
              type: string
              nullable: true
            next:
              type: string
              example: https://izamtest.mgahed.com/api/products?page=2
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            from:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 10
            path:
              type: string
              example: https://izamtest.mgahed.com/api/products
            per_page:
              type: integer
              example: 10
            to:
              type: integer
              example: 10
            total:
              type: integer
              example: 100

    PaginatedOrders:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        links:
          type: object
          properties:
            first:
              type: string
              example: https://izamtest.mgahed.com/api/orders?page=1
            last:
              type: string
              example: https://izamtest.mgahed.com/api/orders?page=3
            prev:
              type: string
              nullable: true
            next:
              type: string
              example: https://izamtest.mgahed.com/api/orders?page=2
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            from:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 3
            path:
              type: string
              example: https://izamtest.mgahed.com/api/orders
            per_page:
              type: integer
              example: 10
            to:
              type: integer
              example: 10
            total:
              type: integer
              example: 25
